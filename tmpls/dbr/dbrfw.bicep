param location string = resourceGroup().location

@description('ipv4 address class B part; ex. the vnet include resources is created like 10.<nettworkAddrB>.0.0/16')
param networkAddrB string = '191'

var nsgName = 'common-nsg'

param clientIp string

// dbr params ------------------------------------------------------------------------------------------------
@description('Specifies whether to deploy Azure Databricks workspace with secure cluster connectivity (SCC) enabled or not (No Public IP)')
param disablePublicIp bool

@description('Specifies whether to deploy Azure Firewall)')
param withFirewall bool

@description('The name of the network security group to create.')
var nsgNameDbr = 'databricks-nsg'

@description('The pricing tier of workspace.')
@allowed([
  'trial'
  'standard'
  'premium'
])
param pricingTier string = 'standard'

@description('CIDR range for the private subnet.')
param subnetCidrDbrPrivate string = format('10.{0}.0.0/18', networkAddrB)

@description('The name of the private subnet to create.')
param dbrPrivateSubnetName string = 'private-subnet'

@description('CIDR range for the public subnet..')
param subnetCidrDbrPublic string = format('10.{0}.64.0/18', networkAddrB)

@description('The name of the public subnet to create.')
param dbrPublicSubnetName string = 'public-subnet'

@description('CIDR range for the vnet.')
param vnetCidrDbr string = format('10.{0}.0.0/16', networkAddrB)

@description('The name of the virtual network to create.')
var dbrVnetName = format('{0}-{1}', 'databricks-vnet', resourceGroup().name)

@description('The name of the Azure Databricks workspace to create.')
param workspaceName string

// dbr -------------------------------------------------------------------------------

var managedResourceGroupName = 'databricks-rg-${workspaceName}-${uniqueString(workspaceName, resourceGroup().id)}'

resource managedResourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' existing = {
  scope: subscription()
  name: managedResourceGroupName
}

resource nsgDbr 'Microsoft.Network/networkSecurityGroups@2020-05-01' = {
  location: location
  name: nsgNameDbr
  properties: {
    securityRules: [
      /* automatically generated by AzureDatabricks service
      {
        name: 'Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-worker-inbound'
        properties: {
          description: 'Required for worker nodes communication within a cluster.'
          protocol: '*'
          sourcePortRange: '*'
          destinationPortRange: '*'
          sourceAddressPrefix: 'VirtualNetwork'
          destinationAddressPrefix: 'VirtualNetwork'
          access: 'Allow'
          priority: 100
          direction: 'Inbound'
        }
      }
      {
        name: 'Microsoft.Databricks-workspaces_UseOnly_databricks-control-plane-inbound'
        properties: {
          description: 'Required Only if SCC disabled cluster.'
          protocol: '*'
          sourcePortRange: '*'
          destinationPortRanges: [
            '22'
            '5557'
          ]
          sourceAddressPrefix: 'AzureDatabricks'
          destinationAddressPrefix: 'VirtualNetwork'
          access: 'Allow'
          priority: 101
          direction: 'Inbound'
        }
      }
      {
        name: 'Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-databricks-webapp'
        properties: {
          description: 'Required for workers communication with Databricks Webapp.'
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '443'
          sourceAddressPrefix: 'VirtualNetwork'
          destinationAddressPrefix: 'AzureDatabricks'
          access: 'Allow'
          priority: 100
          direction: 'Outbound'
        }
      }
      {
        name: 'Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-sql'
        properties: {
          description: 'Required for workers communication with Azure SQL services.'
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '3306'
          sourceAddressPrefix: 'VirtualNetwork'
          destinationAddressPrefix: 'Sql'
          access: 'Allow'
          priority: 101
          direction: 'Outbound'
        }
      }
      {
        name: 'Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-storage'
        properties: {
          description: 'Required for workers communication with Azure Storage services.'
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '443'
          sourceAddressPrefix: 'VirtualNetwork'
          destinationAddressPrefix: 'Storage'
          access: 'Allow'
          priority: 102
          direction: 'Outbound'
        }
      }
      {
        name: 'Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-worker-outbound'
        properties: {
          description: 'Required for worker nodes communication within a cluster.'
          protocol: '*'
          sourcePortRange: '*'
          destinationPortRange: '*'
          sourceAddressPrefix: 'VirtualNetwork'
          destinationAddressPrefix: 'VirtualNetwork'
          access: 'Allow'
          priority: 103
          direction: 'Outbound'
        }
      }
      {
        name: 'Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-eventhub'
        properties: {
          description: 'Required for worker communication with Azure Eventhub services.'
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '9093'
          sourceAddressPrefix: 'VirtualNetwork'
          destinationAddressPrefix: 'EventHub'
          access: 'Allow'
          priority: 104
          direction: 'Outbound'
        }
      }
      */
      {
        name: 'allowRDPfromClient'
        properties: {
          description: 'allow RDP from client'
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '3389'
          sourceAddressPrefix: clientIp
          destinationAddressPrefix: '*'
          access: 'Allow'
          priority: 300
          direction: 'Inbound'
        }
      }
      {
        name: 'allowSSHfromClient'
        properties: {
          description: 'allow SSH from client'
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '22'
          sourceAddressPrefix: clientIp
          destinationAddressPrefix: '*'
          access: 'Allow'
          priority: 310
          direction: 'Inbound'
        }
      }
    ]
  }
}

// https://docs.microsoft.com/en-us/azure/databricks/administration-guide/cloud-configurations/azure/udr
// https://github.com/fguerri/internet-outbound-microhack#task-2-review-databricks-network-architecture-and-connectivity-requirements
param controlPlaneNatIP string = '13.78.19.235/32'
param sccRelayIP string = '20.46.121.76/32'
param metastoreIP string = '40.79.192.23/32'
/*
param artifactBlobStoragePrimaryIP string = '20.38.116.36/32'
param logBlobStorageIP string = '20.150.85.4/32'
param dbfsEndpointIP string = '0.0.0.0/0'
*/
resource routeTableSpokeInternet 'Microsoft.Network/routeTables@2019-11-01' = {
  name: 'routetable-spoke-to-internet'
  location: location
  properties: {
    routes: [
      {
        name: 'control-plane-nat'
        properties: {
          addressPrefix: controlPlaneNatIP
          nextHopType: 'Internet'
        }
      }
      {
        name: 'secure-cluster-connectivity'
        properties: {
          addressPrefix: sccRelayIP
          nextHopType: 'Internet'
        }
      }
      {
        name: 'web-app'
        properties: {
          addressPrefix: webappIp
          nextHopType: 'Internet'
        }
      }
      {
        name: 'extended-infrastructure'
        properties: {
          addressPrefix: extendedInfrastructureIp
          nextHopType: 'Internet'
        }
      }
      {
        name: 'metastore'
        properties: {
          addressPrefix: metastoreIP
          nextHopType: 'Internet'
        }
      }
      /* not tested
      {
        name: 'eventhub'
        properties: {
          addressPrefix: 'EventHub'
          nextHopType: 'Internet'
        }
      }
      {
        name: 'blob'
        properties: {
          addressPrefix: 'Storage'
          nextHopType: 'Internet'
        }
      }
      {
        name: 'databricks'
        properties: {
          addressPrefix: 'AzureDatabricks'
          nextHopType: 'Internet'
        }
      }
      */
    ]
  }
}

resource virtualNetworkDbrSpoke 'Microsoft.Network/virtualNetworks@2020-05-01' = {
  location: location
  name: dbrVnetName
  properties: {
    addressSpace: {
      addressPrefixes: [
        vnetCidrDbr
      ]
    }
    //https://github.com/fguerri/internet-outbound-microhack#task-4-configure-azure-firewall
    dhcpOptions: {
      dnsServers: [
        ((withFirewall) ? format('{0}.4', subnetFirewall) : '168.63.129.16')
      ]
    }
  }
}

resource dbrPublicSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-05-01' = {
  name: dbrPublicSubnetName
  parent: virtualNetworkDbrSpoke
  properties: {
    addressPrefix: subnetCidrDbrPublic
    networkSecurityGroup: {
      id: nsgDbr.id
    }
    delegations: [
      {
        name: 'databricks-del-public'
        properties: {
          serviceName: 'Microsoft.Databricks/workspaces'
        }
      }
    ]
  }
}

resource dbrPrivateSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-05-01' = {
  name: dbrPrivateSubnetName
  parent: virtualNetworkDbrSpoke
  properties: {
    addressPrefix: subnetCidrDbrPrivate
    networkSecurityGroup: {
      id: nsgDbr.id
    }
    natGateway: {
      id: natGateway.id
    }
    delegations: [
      {
        name: format('databricks-del-private{0}', networkAddrB)
        properties: {
          serviceName: 'Microsoft.Databricks/workspaces'
        }
      }
    ]
  }
}

// NAT GW for lettng DBR has public IP
// https://docs.microsoft.com/en-us/azure/databricks/security/secure-cluster-connectivity#egress-with-vnet-injection
resource publicIpPrefixes 'Microsoft.Network/publicIPPrefixes@2021-03-01' = {
  name: format('dbr{0}', resourceGroup().name)
  location: location
  sku: {
    name: 'Standard'
    tier: 'Regional'
  }
  properties: {
    prefixLength: 28
    publicIPAddressVersion: 'IPv4'
  }
}
resource natGateway 'Microsoft.Network/natGateways@2021-03-01' = {
  name: format('dbr{0}', resourceGroup().name)
  location: location
  sku: {
    name: 'Standard'
  }
  properties: {
    idleTimeoutInMinutes: 4
    publicIpPrefixes: [
      {
        id: publicIpPrefixes.id
      }
    ]
  }
}

resource ws 'Microsoft.Databricks/workspaces@2018-04-01' = {
  name: workspaceName
  location: location
  sku: {
    name: pricingTier
  }
  properties: {
    managedResourceGroupId: managedResourceGroup.id
    parameters: {
      customVirtualNetworkId: {
        value: virtualNetworkDbrSpoke.id
      }
      customPublicSubnetName: {
        value: dbrPublicSubnet.name
      }
      customPrivateSubnetName: {
        value: dbrPrivateSubnet.name
      }
      enableNoPublicIp: {
        value: disablePublicIp
      }
    }
  }
}

var storageGen2Name = format('adlsgen2{0}', uniqueString(resourceGroup().id))
resource storageGen2account 'Microsoft.Storage/storageAccounts@2021-02-01' = {
  name: storageGen2Name
  location: location
  kind: 'StorageV2'
  sku: {
    name: 'Standard_LRS'
  }
}


// other resources ---------------------------------------------------------------------
resource networkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2019-11-01' = {
  name: nsgName
  location: location
  properties: {
    securityRules: [
      {
        name: 'allowRDPfromClient'
        properties: {
          description: 'allow RDP from client'
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '3389'
          sourceAddressPrefix: clientIp
          destinationAddressPrefix: '*'
          access: 'Allow'
          priority: 300
          direction: 'Inbound'
        }
      }
      {
        name: 'allowSSHfromClient'
        properties: {
          description: 'allow SSH from client'
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '22'
          sourceAddressPrefix: clientIp
          destinationAddressPrefix: '*'
        
          access: 'Allow'
          priority: 310
          direction: 'Inbound'
        }
      }
      {
        name: 'allowHttpInbound'
        properties: {
          description: 'allow http inbound'
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '80'
          sourceAddressPrefix: '*'
          destinationAddressPrefix: '*'
          access: 'Allow'
          priority: 320
          direction: 'Inbound'
        }
      }
    ]
  }
}



// Azure Firewall and hubnet

// vnet & subnet settings
var vnetCidrAzureHub = format('10.{0}.0.0/16', int(networkAddrB) + 1)
var subnetFirewall = format('10.{0}.0', int(networkAddrB) + 1)
var subnetCidrFirewall = format('{0}.0/24', subnetFirewall)
resource virtualNetworkAzureHub 'Microsoft.Network/virtualNetworks@2019-11-01' = if (withFirewall) {
  name: format('{0}-{1}', 'hub-vnet', resourceGroup().name)
  location: location
  properties: {
    addressSpace: {
      addressPrefixes: [
        vnetCidrAzureHub
      ]
    }
  }
}

var subnetNameFirewall = 'AzureFirewallSubnet'
resource subnetAzureHubFirewall 'Microsoft.Network/virtualNetworks/subnets@2021-03-01' = if (withFirewall) {
  name: subnetNameFirewall
  parent: virtualNetworkAzureHub
  properties: {
    addressPrefix: subnetCidrFirewall
  }
}

// to be attached on SpokeSubnet
resource routeTableSpokeFW 'Microsoft.Network/routeTables@2019-11-01' = if (withFirewall) {
  name: 'routetable-spoke-to-fw'
  location: location
  properties: {
    routes: [
      {
        name: format('route-{0}-spoke', networkAddrB)
        properties: {
          addressPrefix: '0.0.0.0/0'
          nextHopType: 'VirtualAppliance'
          nextHopIpAddress: format('{0}.4', subnetFirewall)
        }
      }
    ]
    disableBgpRoutePropagation: true
  }
}

resource ipgroupDbrPublic 'Microsoft.Network/ipGroups@2021-05-01' = if (withFirewall) {
  name: format('ipgroup-dbr-pub-{0}', uniqueString(resourceGroup().id))
  location: location
  properties: {
    ipAddresses: [
      subnetCidrDbrPublic
    ]
  }
}

resource ipgroupDbrPrivate 'Microsoft.Network/ipGroups@2021-05-01' = if (withFirewall) {
  name:  format('ipgroup-dbr-priv-{0}', uniqueString(resourceGroup().id))
  location: location
  properties: {
    ipAddresses: [
      subnetCidrDbrPrivate
    ]
  }
}

//var firewallIpConfigurations = firewallIpConfigurationPrimal
var nameFirewall = format('firewall-dbr-{0}', resourceGroup().name)
var nameFirewallPolicy = format('{0}-policy', nameFirewall)
resource firewallPolicy 'Microsoft.Network/firewallPolicies@2021-05-01' = if (withFirewall) {
  name: nameFirewallPolicy
  location: location
  properties: {
    dnsSettings: {
      enableProxy: true
    }
    threatIntelMode: 'Alert'
  }
}

param metastoreFqdn string
param extendedInfrastructureIp string
param webappIp string
var nwRuleCollectionGroupName = format('{0}/DefaultNetworkRuleCollectionGroup', nameFirewallPolicy)
resource nwRuleCollectionGroup 'Microsoft.Network/firewallPolicies/ruleCollectionGroups@2021-05-01' = if (withFirewall) {
  name: nwRuleCollectionGroupName
  dependsOn: [
    firewallPolicy
  ]
  properties: {
    priority: 200
    ruleCollections: [
      {
        ruleCollectionType: 'FirewallPolicyFilterRuleCollection'
        action: {
          type: 'Allow'
        }
        name: 'dbr-nrc'
        priority: 220
        rules: [
          {
            ruleType: 'NetworkRule'
            name: 'webapp'
            ipProtocols: [
              'TCP'
            ]
            destinationAddresses: [
              webappIp
            ]
            sourceIpGroups: [
              ipgroupDbrPrivate.id
              ipgroupDbrPublic.id
            ]
            destinationPorts: [
              '443'
            ]
          }
          {
            ruleType: 'NetworkRule'
            name: 'metastore'
            ipProtocols: [
              'TCP'
            ]
            destinationAddresses: [
              metastoreFqdn
            ]
            sourceIpGroups: [
              ipgroupDbrPrivate.id
              ipgroupDbrPublic.id
            ]
            destinationPorts: [
              '3306'
            ]
          }
          {
            ruleType: 'NetworkRule'
            name: 'Extended infrastructure'
            ipProtocols: [
              'TCP'
            ]
            destinationAddresses: [
              extendedInfrastructureIp
            ]
            sourceIpGroups: [
              ipgroupDbrPrivate.id
              ipgroupDbrPublic.id
            ]
            destinationPorts: [
              '443'
            ]
          }
        ]
      }
    ]
  }
}

param sccRelayFqdn string
param artifactBlobStoragePrimaryFqdn string
param artifactBlobStorageSecondaryFqdn string
param logBlobStorageFqdn string
param eventHubEndpointFqdn string
param dbfsEndpointFqdn string
var appRuleCollectionGroupName = format('{0}/DefaultApplicationRuleCollectionGroup', nameFirewallPolicy)
resource appRuleCollectionGroup 'Microsoft.Network/firewallPolicies/ruleCollectionGroups@2021-05-01' = if (withFirewall) {
  name: appRuleCollectionGroupName
  dependsOn: [
    nwRuleCollectionGroup
  ]
  properties: {
    priority: 300
    ruleCollections: [
      {
        ruleCollectionType: 'FirewallPolicyFilterRuleCollection'
        action: {
          type: 'Allow'
        }
        name: 'dbr-rules-arc'
        priority: 310
        rules: [
          {
            ruleType: 'ApplicationRule'
            name: 'SCC relay'
            protocols: [
              {
                protocolType: 'Https'
                port: 443
              }
            ]
            targetFqdns: [
              sccRelayFqdn
            ]
            terminateTLS: false
            sourceIpGroups: [
              ipgroupDbrPrivate.id
              ipgroupDbrPublic.id
            ]
          }
          {
            ruleType: 'ApplicationRule'
            name: 'Artifact Blob Storage Primary'
            protocols: [
              {
                protocolType: 'Https'
                port: 443
              }
            ]
            targetFqdns: [
              artifactBlobStoragePrimaryFqdn
            ]
            terminateTLS: false
            sourceIpGroups: [
              ipgroupDbrPrivate.id
              ipgroupDbrPublic.id
            ]
          }
          {
            ruleType: 'ApplicationRule'
            name: 'Artifact Blob Storage Secondary'
            protocols: [
              {
                protocolType: 'Https'
                port: 443
              }
            ]
            targetFqdns: [
              artifactBlobStorageSecondaryFqdn
            ]
            terminateTLS: false
            sourceIpGroups: [
              ipgroupDbrPrivate.id
              ipgroupDbrPublic.id
            ]
          }
          {
            ruleType: 'ApplicationRule'
            name: 'Log Blob storage'
            protocols: [
              {
                protocolType: 'Https'
                port: 443
              }
            ]
            targetFqdns: [
              logBlobStorageFqdn
            ]
            terminateTLS: false
            sourceIpGroups: [
              ipgroupDbrPrivate.id
              ipgroupDbrPublic.id
            ]
          }
          {
            ruleType: 'ApplicationRule'
            name: 'Event Hub endpoint'
            protocols: [
              {
                protocolType: 'Https'
                port: 443
              }
            ]
            targetFqdns: [
              eventHubEndpointFqdn
            ]
            terminateTLS: false
            sourceIpGroups: [
              ipgroupDbrPrivate.id
              ipgroupDbrPublic.id
            ]
          }
          {
            ruleType: 'ApplicationRule'
            name: 'DBFS Storage'
            description: 'Please replace the FQDN to precise FQDN of the DBFS Storage Account in MGR'
            protocols: [
              {
                protocolType: 'Https'
                port: 443
              }
            ]
            targetFqdns: [
              dbfsEndpointFqdn
            ]
            terminateTLS: false
            sourceIpGroups: [
              ipgroupDbrPrivate.id
              ipgroupDbrPublic.id
            ]
          }
        ]
      }
    ]
  }
}


resource publicIPAddressHubFirewall 'Microsoft.Network/publicIPAddresses@2021-03-01' = if (withFirewall) {
  name: format('hub-firewall-pip-{0}', resourceGroup().name)
  location: location
  sku: {
    name: 'Standard'
  }
  properties: {
    publicIPAllocationMethod: 'Static'
    publicIPAddressVersion: 'IPv4'
    dnsSettings: {
      domainNameLabel: format('hub-firewall-pip-{0}', resourceGroup().name)
    }
  }
}

var firewallIpConfigurationPrimal = array({
  name: format('ipconfigfirewall{0}{1}', networkAddrB, 0)
  properties: {
    subnet: {
      id: subnetAzureHubFirewall.id
    }
    publicIPAddress: {
      id: publicIPAddressHubFirewall.id
    }
  }
})

resource firewall 'Microsoft.Network/azureFirewalls@2021-03-01' = if (withFirewall) {
  name: nameFirewall
  location: location
  dependsOn: [
    virtualNetworkAzureHub
    ipgroupDbrPrivate
    ipgroupDbrPublic
    nwRuleCollectionGroup
    appRuleCollectionGroup
  ]
  properties: {
    ipConfigurations: firewallIpConfigurationPrimal 
    firewallPolicy: {
      id: firewallPolicy.id
    }
  }
}

// vnet peering between hub and spoke
resource peeringSpoke 'Microsoft.Network/virtualNetworks/virtualNetworkPeerings@2020-07-01' = if (withFirewall) {
  name: format('{0}/peering_{1}_{2}', virtualNetworkAzureHub.name, virtualNetworkAzureHub.name, virtualNetworkDbrSpoke.name)
  dependsOn: [
    dbrPublicSubnet
    dbrPrivateSubnet
    subnetAzureHubFirewall
  ]
  properties: {
    allowVirtualNetworkAccess: true
    allowForwardedTraffic: true
    /*
    allowGatewayTransit: false
    useRemoteGateways: false
    */
    remoteVirtualNetwork: {
      id: virtualNetworkDbrSpoke.id
    }
  }
}
resource peeringHub 'Microsoft.Network/virtualNetworks/virtualNetworkPeerings@2020-07-01' = if (withFirewall) {
  name: format('{0}/peering_{1}_{2}', virtualNetworkDbrSpoke.name, virtualNetworkDbrSpoke.name, virtualNetworkAzureHub.name)
  dependsOn: [
    dbrPublicSubnet
    dbrPrivateSubnet
    subnetAzureHubFirewall
  ]
  properties: {
    allowVirtualNetworkAccess: true
    allowForwardedTraffic: true
    /*
    allowGatewayTransit: false
    useRemoteGateways: false
    */
    remoteVirtualNetwork: {
      id: virtualNetworkAzureHub.id
    }
  }
}
